@inject IRepositorio repositorio

<EditForm Model="Proyecto" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label>Nombre Proyecto</label>
        <InputText class="form-control" @bind-Value="Proyecto.NombreProyecto"></InputText>
        <ValidationMessage For="@(()=> Proyecto.NombreProyecto)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label>Municipio</label>
        <InputText class="form-control" @bind-Value="Proyecto.Municipio"></InputText>
        <ValidationMessage For="@(()=> Proyecto.Municipio)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label>Cliente</label>
        <InputSelect class="form-control" @bind-Value="Proyecto.ClienteId">
            <ValidationMessage For="@(()=> Proyecto.ClienteId)"></ValidationMessage>
            <option value="">--Seleccione cliente--</option>
            @foreach (var cliente in clientes)
            {
                <option value="@cliente.ClienteId">@cliente.NombreCliente</option>
            }
        </InputSelect>
    </div>
    <br />
    <button class="btn btn-success" type="submit">Guardar</button>
</EditForm>

@code {
    [Parameter] public EntidadProyecto Proyecto { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    List<EntidadCliente> clientes = new List<EntidadCliente>();

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repositorio.Get<List<EntidadCliente>>("api/clientes");
        clientes = responseHttp.Response;
    }
}
