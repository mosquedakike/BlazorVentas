// <auto-generated />
using System;
using AplicacionVentas.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AplicacionVentas.Server.Migrations
{
    [DbContext(typeof(AplicacionVentasContext))]
    partial class AplicacionVentasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadCliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Estatus")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            Estatus = true,
                            NombreCliente = "Quaker State"
                        });
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadEmpleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApMaterno")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ApPaterno")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("Estatus")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreEmpleado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("integer");

                    b.Property<string>("PuestoEmpleado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            EmpleadoId = 1,
                            ApMaterno = "DURAN",
                            ApPaterno = "BRAVO",
                            Estatus = true,
                            NombreEmpleado = "ELSA VERONICA",
                            ProyectoId = 1,
                            PuestoEmpleado = "Vendedor"
                        },
                        new
                        {
                            EmpleadoId = 2,
                            ApMaterno = "RODRIGUEZ",
                            ApPaterno = "ALVARADO",
                            Estatus = true,
                            NombreEmpleado = "NADIA AMAYRANI",
                            ProyectoId = 1,
                            PuestoEmpleado = "Vendedor"
                        },
                        new
                        {
                            EmpleadoId = 3,
                            ApMaterno = "ARELLANO",
                            ApPaterno = "CARREON",
                            Estatus = true,
                            NombreEmpleado = "MARIA DE JESUS",
                            ProyectoId = 2,
                            PuestoEmpleado = "Vendedor"
                        });
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadEvidencia", b =>
                {
                    b.Property<int>("EvidenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCaptura")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Foto")
                        .HasColumnType("text");

                    b.HasKey("EvidenciaId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Evidencias");
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadProducto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DescripcionProducto")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<bool>("Estatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("ProductoId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            DescripcionProducto = "25W50",
                            Estatus = true,
                            Marca = "Quaker State",
                            NombreProducto = "QS MAXIMA VISCOSIDAD SAE 25W50 CF4"
                        },
                        new
                        {
                            ProductoId = 2,
                            DescripcionProducto = "GREEN OIL",
                            Estatus = true,
                            Marca = "Quaker State",
                            NombreProducto = "QS GREEN OIL SAE 140"
                        },
                        new
                        {
                            ProductoId = 3,
                            DescripcionProducto = "Anticongelante",
                            Estatus = true,
                            Marca = "Quaker State",
                            NombreProducto = "ANTICONGELANTE CONCENTRACION IDEAL"
                        });
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadProyecto", b =>
                {
                    b.Property<int>("ProyectoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreProyecto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProyectoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Proyectos");

                    b.HasData(
                        new
                        {
                            ProyectoId = 1,
                            ClienteId = 1,
                            Estatus = true,
                            Municipio = "Ciudad de Mexico",
                            NombreProyecto = "Promotoria Quaker State - CDMX"
                        },
                        new
                        {
                            ProyectoId = 2,
                            ClienteId = 1,
                            Estatus = true,
                            Municipio = "Monterrey",
                            NombreProyecto = "Promotoria Quaker State - Monterrey"
                        });
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadVenta", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<string>("DescripcionProducto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCaptura")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FechaVenta")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VentaId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Ventas");

                    b.HasData(
                        new
                        {
                            VentaId = 1,
                            Cantidad = 3,
                            DescripcionProducto = "25W50",
                            EmpleadoId = 1,
                            FechaCaptura = new DateTime(2021, 6, 21, 11, 49, 36, 896, DateTimeKind.Local).AddTicks(2801),
                            FechaVenta = new DateTime(2021, 6, 21, 11, 49, 36, 894, DateTimeKind.Local).AddTicks(1695),
                            NombreProducto = "QS MAXIMA VISCOSIDAD SAE 25W50 CF4"
                        },
                        new
                        {
                            VentaId = 2,
                            Cantidad = 3,
                            DescripcionProducto = "GREEN OIL",
                            EmpleadoId = 2,
                            FechaCaptura = new DateTime(2021, 6, 21, 11, 49, 36, 896, DateTimeKind.Local).AddTicks(3094),
                            FechaVenta = new DateTime(2021, 6, 21, 11, 49, 36, 896, DateTimeKind.Local).AddTicks(3087),
                            NombreProducto = "QS GREEN OIL SAE 140"
                        },
                        new
                        {
                            VentaId = 3,
                            Cantidad = 3,
                            DescripcionProducto = "Anticongelante",
                            EmpleadoId = 3,
                            FechaCaptura = new DateTime(2021, 6, 21, 11, 49, 36, 896, DateTimeKind.Local).AddTicks(3100),
                            FechaVenta = new DateTime(2021, 6, 21, 11, 49, 36, 896, DateTimeKind.Local).AddTicks(3098),
                            NombreProducto = "ANTICONGELANTE CONCENTRACION IDEAL"
                        });
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadVentaTotal", b =>
                {
                    b.Property<int>("VentaTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCaptura")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FechaVenta")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("VentaTotalId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("VentasTotal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "61895af9-efc1-4a0a-b054-7bd9c884c11f",
                            ConcurrencyStamp = "9d1332cc-69cb-44d7-9875-d2004313469f",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c71df716-43f7-4d8d-9862-bb1e53bdeab5",
                            ConcurrencyStamp = "88152c9d-025a-40dc-941b-db07c3da7dd8",
                            Name = "VENDEDOR",
                            NormalizedName = "VENDEDOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadEmpleado", b =>
                {
                    b.HasOne("AplicacionVentas.Shared.Entidades.EntidadProyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadEvidencia", b =>
                {
                    b.HasOne("AplicacionVentas.Shared.Entidades.EntidadEmpleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadProyecto", b =>
                {
                    b.HasOne("AplicacionVentas.Shared.Entidades.EntidadCliente", "Cliente")
                        .WithMany("Proyectos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadVenta", b =>
                {
                    b.HasOne("AplicacionVentas.Shared.Entidades.EntidadEmpleado", "Empleado")
                        .WithMany("Ventas")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadVentaTotal", b =>
                {
                    b.HasOne("AplicacionVentas.Shared.Entidades.EntidadEmpleado", "Empleado")
                        .WithMany("VentasTotal")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadCliente", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("AplicacionVentas.Shared.Entidades.EntidadEmpleado", b =>
                {
                    b.Navigation("Ventas");

                    b.Navigation("VentasTotal");
                });
#pragma warning restore 612, 618
        }
    }
}
